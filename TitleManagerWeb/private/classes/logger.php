<?php

// require_once(CLASS_PATH.DS."sqlserverdatabase.php");

class Logger {

  protected $error_file;

  function __construct() {
    $this->error_file = $this->set_errorfile();
  }

  public function get_errorlog_location() {
    return LOG_PATH.DS.$this->error_file;
  }

  public function log_error(Throwable $exception) {
    $logged_to_db = FALSE;
    $datetimelogged = generate_datetime_for_sql();
    $errorstring = $this->prepare_errorstring($exception);
    try {
      // $this->log_to_file(0, $errorstring, FALSE, $datetimelogged);
      $existing_errorstring = Errorstring::find_errorstring($errorstring);
      $existing_errorstring ? $errorstring_id = $existing_errorstring->get_errorstringid() : $errorstring_id = Errorstring::create_errorstring($errorstring)->get_errorstringid();

      $error = MyError::log_error($errorstring_id, $exception->getCode());
      $logged_to_db = TRUE;
      $datetimelogged = $error->get_datetimelogged();
    }
    catch (Throwable $e) {
      $errorstring = "Couldn't log original error to database, encountered new error (original error will be appended to the new error) in file " . $e->getFile() . " (line " . $e->getLine() . "): " . $e->getMessage() . ". ORIGINAL ERROR: " . $errorstring;
    }
    finally {
      $this->log_error_to_file($exception->getCode(), $errorstring, $logged_to_db, $datetimelogged);
    }
  }

  public function log_error_simple(Throwable $exception) {
    $logged_to_db = FALSE;
    $datetimelogged = generate_datetime_for_sql();
    $errorstring = $this->prepare_errorstring($exception);
    $this->log_error_to_file($exception->getCode(), $errorstring, $logged_to_db, $datetimelogged);
  }

  private function log_error_to_file(int $exceptioncode, $errorstring, $logged_to_db=FALSE, $datetimelogged) {
    try {
      $logged_to_db ? $is_logged = "LOGGED TO DB.     " : $is_logged = "NOT LOGGED TO DB. ";
      isset($_SESSION["user_id"]) ? $generatedby = $_SESSION["user_id"] : $generatedby = NULL;

      $errorstring = $is_logged . "[" . $datetimelogged . "] " . "Exception code: " . $exceptioncode . ". Generated by userid: " . $generatedby . ". " . $errorstring . PHP_EOL;
      file_put_contents($this->get_errorlog_location(), $errorstring, FILE_APPEND | LOCK_EX);
    }
    catch (Throwable $e) {
      echo "Couldn't log error to file! " . $e->getMessage();
    }
  }

  private function prepare_errorstring(Throwable $exception) {
    $error_message = $exception->getMessage();
    $file = $exception->getFile();
    $line = $exception->getLine();
    $trace = $exception->getTraceAsString();
    $error_message = get_class($exception) . " encountered in file " . $file . " (line " . $line . "): " . $error_message . ". ";
    $errorstring = $error_message . "Trace: " . $trace . ". ";
    return $errorstring;
  }

  private function set_errorfile() {
    $filename = "[" . date("Y-m-d") . "]" . "errors.log";
    return $filename;

  }




  // old functions, want to change 180321

  // to database
  public function database_create_user_log($user_id) {
    //rename to create_user_log($user) ?
    global $database;

    $datetime_login = generate_datetime_for_sql();

    $datetime_last_activity = $datetime_login;

    $query  = "INSERT INTO Web_Logins (UserID, DateTimeLogin, DateTimeLastActivity)";
    $query .= " VALUES (?, ?, ?)";
    $query .= " ; SELECT SCOPE_IDENTITY() as id";

    $params = array($user_id, $datetime_login, $datetime_last_activity);

    $logged_user = $database->query($query, $params);
    $_SESSION["login_id"] = $database->get_scope_identity($logged_user);
    $_SESSION["last_activity"] = $datetime_last_activity;
    return $logged_user;
  }

  public function database_update_user_log($login_id) {
    global $database;

    $datetime_last_activity = generate_datetime_for_sql();

    $query  = "UPDATE Web_Logins";
    $query .= " SET DateTimeLastActivity = ?";
    $query .= " WHERE Web_LoginID = ?";

    $params = array($datetime_last_activity, $login_id);

    $logged = $database->query($query, $params);
    return $logged;
  }


  // to file
  public function log_to_file($file_name, $message) {
    $file = fopen($file_name, "a");
    if ($file) {
      $message .= "\n";
      fwrite($file, $message);
      fclose($file);
    }
    else {
      die("Unable to open file!");
    }
  }

  // -------------------------------------------------



}

$logger = new Logger();

?>
